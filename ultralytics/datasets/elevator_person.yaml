# Ultralytics YOLO ðŸš€, GPL-3.0 license
# COCO 2017 dataset http://cocodataset.org by Microsoft
# Example usage: yolo train data=coco.yaml
# parent
# â”œâ”€â”€ yolov8
# â””â”€â”€ datasets
#     â””â”€â”€ sida


# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/ElevatorPerson  # dataset root dir
train: train_elevator_person.txt  # train images (relative to 'path')
val: val_elevator_person.txt  # val images (relative to 'path')
test:  # test images (optional)

data_root: '/root/data'
train_anns: [
]
train_image_dirs: [
]
val_anns: [
  'ElevatorPerson/test.json',
]
val_image_dirs: [
  'ElevatorPerson/test'
]
background_image_list_files: [
]
background_image_dirs: [
]

# Classes
names:
  0: person
  1: bicycle
  2: car
  3: motorcycle
  4: airplane
  5: bus
  6: train
  7: truck
  8: boat
  9: traffic light
  10: fire hydrant
  11: stop sign
  12: parking meter
  13: bench
  14: bird
  15: cat
  16: dog
  17: horse
  18: sheep
  19: cow
  20: elephant
  21: bear
  22: zebra
  23: giraffe
  24: backpack
  25: umbrella
  26: handbag
  27: tie
  28: suitcase
  29: frisbee
  30: skis
  31: snowboard
  32: sports ball
  33: kite
  34: baseball bat
  35: baseball glove
  36: skateboard
  37: surfboard
  38: tennis racket
  39: bottle
  40: wine glass
  41: cup
  42: fork
  43: knife
  44: spoon
  45: bowl
  46: banana
  47: apple
  48: sandwich
  49: orange
  50: broccoli
  51: carrot
  52: hot dog
  53: pizza
  54: donut
  55: cake
  56: chair
  57: couch
  58: potted plant
  59: bed
  60: dining table
  61: toilet
  62: tv
  63: laptop
  64: mouse
  65: remote
  66: keyboard
  67: cell phone
  68: microwave
  69: oven
  70: toaster
  71: sink
  72: refrigerator
  73: book
  74: clock
  75: vase
  76: scissors
  77: teddy bear
  78: hair drier
  79: toothbrush


label_use_object_min_area_filter: False


# Download script/URL (optional)
download: |
  import os
  from pathlib import Path
  from ultralytics.yolo.utils.gen_labels import gen_labels, gen_backgrouds

  # Make Directories
  dir = Path(yaml['path'])  # dataset root dir)

  data_root = Path(yaml['data_root'])
  names = yaml['names']
  if yaml.get('label_use_object_min_area_filter', False):
      object_min_area = yaml.get('object_min_area', None)
  else:
      object_min_area = None
  images_dir = dir / 'images'
  labels_dir = dir / 'labels'

  labels_dir.mkdir(parents=True, exist_ok=True)
  if not os.path.exists(images_dir):
      os.symlink(data_root, images_dir)

  out_file_path = Path(yaml['train'])
  out_file_path.parent.mkdir(parents=True, exist_ok=True)
  out_images_file = open(out_file_path, 'w', encoding='utf-8')
  for ann_file_path, image_dir in zip(yaml['train_anns'], yaml['train_image_dirs']):
      gen_labels(names, dir, data_root, out_images_file, ann_file_path, image_dir, skip_crowd=True, skip_reflected=False, object_min_area=object_min_area, skips=None)
  for ann_file_path, image_dir in zip(yaml['background_image_list_files'], yaml['background_image_dirs']):
      gen_backgrouds(names, dir, data_root, out_images_file, ann_file_path, image_dir)
  out_images_file.close()
  
  out_file_path = Path(yaml['val'])
  out_file_path.parent.mkdir(parents=True, exist_ok=True)
  out_images_file = open(out_file_path, 'w', encoding='utf-8')
  for ann_file_path, image_dir in zip(yaml['val_anns'], yaml['val_image_dirs']):
      gen_labels(names, dir, data_root, out_images_file, ann_file_path, image_dir, skip_crowd=False, skip_reflected=False, object_min_area=None, skips=None)
  out_images_file.close()
